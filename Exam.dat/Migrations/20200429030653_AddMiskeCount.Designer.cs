// <auto-generated />
using System;
using Exam.dat;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exam.dat.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200429030653_AddMiskeCount")]
    partial class AddMiskeCount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Exam.dat.DataModels.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("UserId");

                    b.HasKey("LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId1");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("UserId1");

                    b.Property<string>("Value");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Class");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Imgurl");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Signature");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Exam.dat.DataModels.DegreeTb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Degree")
                        .IsUnique()
                        .HasName("IX_DegreeTb");

                    b.ToTable("DegreeTb");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Degree = "初等"
                        },
                        new
                        {
                            Id = 2,
                            Degree = "中等"
                        },
                        new
                        {
                            Id = 3,
                            Degree = "高等"
                        });
                });

            modelBuilder.Entity("Exam.dat.DataModels.Mistake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(1000);

                    b.Property<string>("Calss")
                        .HasMaxLength(15);

                    b.Property<string>("Misanswer")
                        .HasMaxLength(1000);

                    b.Property<string>("Mistake1")
                        .HasColumnName("Mistake")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mistake");
                });

            modelBuilder.Entity("Exam.dat.DataModels.NewTeacherTopic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnName("Class");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Scipt");

                    b.Property<string>("TopicSytemId")
                        .IsRequired()
                        .HasColumnName("TopicSytemId")
                        .HasMaxLength(1000);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("NewTeacherTopic");
                });

            modelBuilder.Entity("Exam.dat.DataModels.NewTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnName("Answer1")
                        .HasMaxLength(1000);

                    b.Property<string>("Answer2")
                        .IsRequired()
                        .HasColumnName("Answer2")
                        .HasMaxLength(1000);

                    b.Property<string>("Answer3")
                        .IsRequired()
                        .HasColumnName("Answer3")
                        .HasMaxLength(1000);

                    b.Property<string>("Answer4")
                        .IsRequired()
                        .HasColumnName("answer4")
                        .HasMaxLength(1000);

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnName("kind")
                        .HasMaxLength(100);

                    b.Property<int>("MistakeNum");

                    b.Property<string>("OptionFour")
                        .IsRequired()
                        .HasColumnName("optionFOUR")
                        .HasMaxLength(1000);

                    b.Property<string>("OptionOne")
                        .IsRequired()
                        .HasColumnName("optionONE")
                        .HasMaxLength(1000);

                    b.Property<string>("OptionThree")
                        .IsRequired()
                        .HasColumnName("optionTHREE")
                        .HasMaxLength(1000);

                    b.Property<string>("OptionTow")
                        .IsRequired()
                        .HasColumnName("optionTOW")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(4000);

                    b.Property<string>("TopicSytemId")
                        .IsRequired()
                        .HasColumnName("TopicSytemId")
                        .HasMaxLength(1000);

                    b.Property<int>("Topid");

                    b.HasKey("Id");

                    b.ToTable("NewTopics");
                });

            modelBuilder.Entity("Exam.dat.DataModels.Studentscore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(15);

                    b.Property<DateTime>("ExamTime")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<int?>("Score");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("studentscore");
                });

            modelBuilder.Entity("Exam.dat.DataModels.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnName("Answer1")
                        .HasMaxLength(1000);

                    b.Property<string>("Answer2")
                        .IsRequired()
                        .HasColumnName("Answer2")
                        .HasMaxLength(1000);

                    b.Property<string>("Answer3")
                        .IsRequired()
                        .HasColumnName("Answer3")
                        .HasMaxLength(1000);

                    b.Property<string>("Answer4")
                        .IsRequired()
                        .HasColumnName("answer4")
                        .HasMaxLength(1000);

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnName("kind")
                        .HasMaxLength(100);

                    b.Property<string>("OptionFour")
                        .IsRequired()
                        .HasColumnName("optionFOUR")
                        .HasMaxLength(1000);

                    b.Property<string>("OptionOne")
                        .IsRequired()
                        .HasColumnName("optionONE")
                        .HasMaxLength(1000);

                    b.Property<string>("OptionThree")
                        .IsRequired()
                        .HasColumnName("optionTHREE")
                        .HasMaxLength(1000);

                    b.Property<string>("OptionTow")
                        .IsRequired()
                        .HasColumnName("optionTOW")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Exam.dat.DataModels.TopicMistakeCount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnName("Count");

                    b.Property<int>("Topicid")
                        .HasColumnName("Topicid");

                    b.HasKey("ID");

                    b.HasIndex("Topicid");

                    b.ToTable("TopicMistakeCount");
                });

            modelBuilder.Entity("Exam.dat.DataModels.TopicSystem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnName("Class");

                    b.Property<int>("Significance")
                        .HasColumnName("Significance");

                    b.Property<string>("TopicSytemId")
                        .HasColumnName("TopicSytemId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("TopicSystem");
                });

            modelBuilder.Entity("Exam.dat.DataModels.TopicTypeTb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TopicType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("TopicType")
                        .IsUnique()
                        .HasName("IX_TopicTypeTb");

                    b.ToTable("TopicTypeTb");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TopicType = "C#"
                        },
                        new
                        {
                            Id = 2,
                            TopicType = "JavaScreipt"
                        },
                        new
                        {
                            Id = 3,
                            TopicType = "ASP.NET"
                        });
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetRoleClaims", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserClaims", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserLogins", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserRoles", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Exam.dat.DataModels.AspNetUserTokens", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Exam.dat.DataModels.Mistake", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany("Mistake")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exam.dat.DataModels.NewTeacherTopic", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam.dat.DataModels.Studentscore", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany("Studentscore")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exam.dat.DataModels.TopicMistakeCount", b =>
                {
                    b.HasOne("Exam.dat.DataModels.Topic", "Topics")
                        .WithMany()
                        .HasForeignKey("Topicid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam.dat.DataModels.TopicSystem", b =>
                {
                    b.HasOne("Exam.dat.DataModels.AspNetUsers", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
